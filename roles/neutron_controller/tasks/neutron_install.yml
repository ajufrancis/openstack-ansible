---

- name: Install neutron network service on controller
  apt: name={{ item }} state=present
  with_items:
    - neutron-server
    - neutron-plugin-ml2

- name: Make sure default section exists in conf files
  lineinfile: dest={{ item }}
              regexp="^(\[default\]|\[DEFAULT\])$"
              insertbefore=BOF
              line=[DEFAULT]
              backup=yes
              create=yes
  with_items:
    - "{{ conf_file }}"
    - "{{ conf4_file }}"
  notify: restart neutron controller

- name: Configure db conn
  ini_file: dest={{ item[0] }}
            section=database
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: connection, value: "mysql://neutron:{{ neutron_dbpass }}@controller/neutron"},
      ]
  notify: restart neutron controller

- name: Configure rabbit rpc
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{ item[1].option }}
            value={{ item[1].value }}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: rpc_backend, value: neutron.openstack.common.rpc.impl_kombu},
      {option: rabbit_host, value: controller},
      {option: rabbit_password, value: "{{ rabbit_pass }}"},
      ]
  notify: restart neutron controller

- name: Configure strategy
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: auth_strategy, value: keystone},
      ]
  notify: restart neutron controller

- name: Configure keystone authtoken
  ini_file: dest={{ item[0] }}
            section=keystone_authtoken
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: auth_uri, value: "http://controller:5000"},
      {option: auth_host, value: controller},
      {option: auth_port, value: 35357},
      {option: auth_protocol, value: http},
      {option: admin_tenant_name, value: service},
      {option: admin_user, value: neutron},
      {option: admin_password, value: "{{ neutron_pass }}"},
      ]
  notify: restart neutron controller

- name: Get the service id
  shell: /usr/bin/keystone --os-token={{ service_token }} --os-endpoint={{ service_endpoint }} tenant-get service | awk '/ id / {print $4}'
  register: service_id
- name: Configure compute for network topology changes
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: notify_nova_on_port_status_changes, value: True},
      {option: notify_nova_on_port_data_changes, value: True},
      {option: nova_url, value: "http://controller:8774/v2"},
      {option: nova_admin_username, value: nova},
      {option: nova_admin_tenant_id, value: "{{ service_id['stdout_lines'][0] }}"},
      {option: nova_admin_password, value: "{{ nova_pass }}"},
      {option: nova_admin_auth_url, value: "http://controller:35357/v2.0"},
      ]
  notify: restart neutron controller

- name: Configure networking to use ML2 plugin
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: core_plugin, value: ml2},
      {option: service_plugins, value: router},
      {option: allow_overlapping_ips, value: True},
      ]
  notify: restart neutron controller

- name: Configure network service providers
  ini_file: dest={{ item[0] }}
            section=service_providers
            state=absent
            backup=yes
  with_items:
    - ["{{ conf_file }}"]
  notify: restart neutron controller

- name: Configure ML2 plugin ml2
  ini_file: dest={{ item[0] }}
            section=ml2
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: type_drivers, value: gre},
      {option: tenant_network_types, value: gre},
      {option: mechanism_drivers, value: openvswitch},
      ]
  notify: restart neutron controller

- name: Configure ML2 plugin ml2 type gre
  ini_file: dest={{ item[0] }}
            section=ml2_type_gre
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: tunnel_id_ranges, value: "1:1000"},
      ]
  notify: restart neutron controller

- name: Configure ML2 plugin security group
  ini_file: dest={{ item[0] }}
            section=securitygroup
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: firewall_driver, value: neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver},
      {option: enable_security_group, value: True},
      ]
  notify: restart neutron controller

- name: Configure compute to use networking`
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf4_file }}"]
    - [
      {option: network_api_class, value: nova.network.neutronv2.api.API},
      {option: neutron_url, value: "http://controller:9696"},
      {option: neutron_auth_strategy, value: keystone},
      {option: neutron_admin_tenant_name, value: service},
      {option: neutron_admin_username, value: neutron},
      {option: neutron_admin_password, value: "{{ neutron_pass }}"},
      {option: neutron_admin_auth_url, value: "http://controller:35357/v2.0"},
      {option: linuxnet_interface_driver, value: nova.network.linux_net.LinuxOVSInterfaceDriver},
      {option: firewall_driver, value: nova.virt.firewall.NoopFirewallDriver},
      {option: security_group_api, value: neutron},
      ]
  notify: restart neutron controller

- name: Configure network metadata
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf4_file }}"]
    - [
      {option: service_neutron_metadata_proxy, value: true},
      {option: neutron_metadata_proxy_shared_secret, value: "{{ metadata_secret }}"},
      ]
  notify: restart neutron controller

# until a way to trigger the notify's after a task is done is found,
# this'll have to do - we need to restart before the next task starts
- name: Restart neutron controller
  shell: creates={{ neutron_controller_restarted }}
         service {{ item }} restart
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - neutron-server
- name: Mark neutron controller restarted
  lineinfile: dest={{ neutron_controller_restarted }}
              line=done
              state=present
              create=yes

