---

- name: Configure sysctl
  lineinfile: dest={{ item[0] }}
              regexp={{item[1].regexp}}
              insertbefore=BOF
              line={{item[1].line}}
              backup=yes
              create=yes
  with_nested:
    - ["{{ conf3_file }}"]
    - [
      {regexp: net\.ipv4\.ip_forward, line: net.ipv4.ip_forward=1},
      {regexp: net\.ipv4\.conf\.all\.rp_filter, line: net.ipv4.conf.all.rp_filter=0},
      {regexp: net\.ipv4\.conf\.default\.rp_filter, line: net.ipv4.conf.default.rp_filter=0},
      ]
  notify: sysctl
- name: Run sysctl
  shell: creates={{ neutron_sysctl }}
         sysctl -p
- name: Mark sysctl
  lineinfile: dest={{ neutron_sysctl }}
              line=done
              state=present
              create=yes

- name: Install neutron Network service on network
  apt: name={{ item }} state=present
  with_items:
    - neutron-plugin-ml2
    - neutron-plugin-openvswitch-agent
    - neutron-l3-agent
    - neutron-dhcp-agent

- name: Make sure default section exists in conf files
  lineinfile: dest={{ item }}
              regexp="^(\[default\]|\[DEFAULT\])$"
              insertbefore=BOF
              line=[DEFAULT]
              backup=yes
              create=yes
  with_items:
    - "{{ conf_file }}"
    - "{{ conf5_file }}"
    - "{{ conf6_file }}"
    - "{{ conf7_file }}"
  notify: restart neutron network

- name: Configure strategy
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: auth_strategy, value: keystone},
      ]
  notify: restart neutron network

- name: Configure keystone authtoken
  ini_file: dest={{ item[0] }}
            section=keystone_authtoken
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: auth_uri, value: "http://controller:5000"},
      {option: auth_host, value: controller},
      {option: auth_port, value: 35357},
      {option: auth_protocol, value: http},
      {option: admin_tenant_name, value: service},
      {option: admin_user, value: neutron},
      {option: admin_password, value: "{{ neutron_pass }}"},
      ]
  notify: restart neutron network

- name: Configure rabbit rpc
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{ item[1].option }}
            value={{ item[1].value }}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: rpc_backend, value: neutron.openstack.common.rpc.impl_kombu},
      {option: rabbit_host, value: controller},
      {option: rabbit_password, value: "{{ rabbit_pass }}"},
      ]
  notify: restart neutron network

- name: Configure networking to use ML2 plugin
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf_file }}"]
    - [
      {option: core_plugin, value: ml2},
      {option: service_plugins, value: router},
      {option: allow_overlapping_ips, value: True},
      ]
  notify: restart neutron network

- name: Configure network service providers
  ini_file: dest={{ item[0] }}
            section=service_providers
            state=absent
            backup=yes
  with_items:
    - ["{{ conf_file }}"]
  notify: restart neutron network

- name: Configure L3 agent
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf5_file }}"]
    - [
      {option: interface_driver, value: neutron.agent.linux.interface.OVSInterfaceDriver},
      {option: use_namespaces, value: True},
      ]
  notify: restart neutron network

- name: Configure DHCP agent
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf6_file }}"]
    - [
      {option: interface_driver, value: neutron.agent.linux.interface.OVSInterfaceDriver},
      {option: dhcp_driver, value: neutron.agent.linux.dhcp.Dnsmasq},
      {option: use_namespaces, value: True},
      ]
  notify: restart neutron network

- name: Configure MetaData agent
  ini_file: dest={{ item[0] }}
            section=DEFAULT
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf7_file }}"]
    - [
      {option: auth_url, value: "http://controller:5000/v2.0"},
      {option: auth_region, value: regionOne},
      {option: admin_tenant_name, value: service},
      {option: admin_user, value: neutron},
      {option: admin_password, value: "{{ neutron_pass }}"},
      {option: nova_metadata_ip, value: controller},
      {option: metadata_proxy_shared_secret, value: "{{ metadata_secret }}"},
      ]
  notify: restart neutron network

- name: Configure ML2 plugin ml2
  ini_file: dest={{ item[0] }}
            section=ml2
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: type_drivers, value: gre},
      {option: tenant_network_types, value: gre},
      {option: mechanism_drivers, value: openvswitch},
      ]
  notify: restart neutron controller

- name: Configure ML2 plugin ml2 type gre
  ini_file: dest={{ item[0] }}
            section=ml2_type_gre
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: tunnel_id_ranges, value: "1:1000"],
      ]
  notify: restart neutron controller

- name: Configure ML2 plugin ovs
  ini_file: dest={{ item[0] }}
            section=ovs
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: tunnel_id_ranges, value: "{{ network1_data_ip }}"],
      {option: tunnel_type, value: gre],
      {option: enable_tunneling, value: True},
      ]
  notify: restart neutron controller

- name: Configure ML2 plugin security group
  ini_file: dest={{ item[0] }}
            section=security_group
            option={{item[1].option}}
            value={{item[1].value}}
            backup=yes
  with_nested:
    - ["{{ conf2_file }}"]
    - [
      {option: firewall_driver, value: neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver},
      {option: enable_security_group, value: True},
      ]
  notify: restart neutron controller





# until a way to trigger the notify's after a task is done is found,
# this'll have to do - we need to restart before the next task starts
- name: Restart network neutron
  shell: creates={{ neutron_compute_restarted }}
         service {{ item }} restart
  with_items:
    - neutron-compute
- name: Mark neutron compute restarted
  lineinfile: dest={{ neutron_compute_restarted }}
              line=done
              state=present
              create=yes

